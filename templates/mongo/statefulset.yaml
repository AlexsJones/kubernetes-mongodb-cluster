---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongod
  namespace: {{.namespace}}
  labels:
    app: mongodb
    component: mongodb
    role: services
spec:
  selector:
    matchLabels:
      app: mongodb
      component: mongodb
      role: services
  serviceName: mongodb
  replicas: {{ .replica }}
  template:
    metadata:
      labels:
        app: mongodb
        component: mongodb
        role: services
    spec:
      serviceAccount: kubernetes-mongodb-service-account
{{- if not .dev }}
      affinity:
{{- if .node_affinity_key }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{.node_affinity_key}}
                operator: In
                values:
                - {{.node_affinity_selector}}
{{- end }}
{{- if .pod_affinity_key }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: {{.pod_affinity_key}}
                  operator: In
                  values:
                  - {{.pod_affinity_selector}}
              topologyKey: kubernetes.io/hostname
{{- end }}
{{- end }}
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: copy-ro-scripts
        image: busybox
        command: ['sh', '-c', 'cp /tmp/rs-key /mongotemp/rs-key && chmod 0400 /mongotemp/rs-key && chown 999:999 /mongotemp/rs-key']
        volumeMounts:
        - name: mongodb-rs-key
          mountPath: /tmp/rs-key
          subPath: rs-key
        - name: tempvol
          mountPath: /mongotemp
      containers:
# {{- if .with_gcs_backups }}
#       - name: mongo-fuse
#         securityContext:
#             privileged: true
#             capabilities:
#               add:
#                 - SYS_ADMIN
#         image: tibbar/gcsfuse:latest
#         imagePullPolicy: Always
#         command:
#           - "bin/bash"
#           - "-c"
#           - "gcsfuse -o nonempty,allow_other,rw $STORAGE_BUCKET /mnt/bucket && sleep 3000"
#         env:
#         - name: GOOGLE_APPLICATION_CREDENTIALS
#           value: /etc/google-credentials
#         - name: STORAGE_BUCKET
#           value: {{ .gcsfuse.storage_bucket }}
#         volumeMounts:
#         - name: google-credentials
#           mountPath: /etc/google-credentials
#           subPath: google-credentials
#         - name: shared-bucket-dir
#           mountPath: /mnt/bucket
#         - name: data
#           mountPath: /data/db
# {{- end }}
      - name: mongo-sidecar
        image: tibbar/mongo-k8s-sidecar:latest
        env:
        - name: MONGO_SIDECAR_POD_LABELS
          value: "app=mongodb,role=services,component=mongodb"
        - name: MONGODB_USERNAME
          value: "{{.mongodb.rootusername}}"
        - name: MONGODB_PASSWORD
          value: "{{.mongodb.rootpassword}}"
        - name: KUBERNETES_MONGO_SERVICE_NAME
          value: "mongodb"
        - name: MONGO_SSL_ENABLED
          value: "{{.mongosidecar.sslenabled}}"
        - name: MONGO_SSL_ALLOW_INVALID_CERTIFICATES
          value: "true"
        - name: MONGO_SSL_ALLOW_INVALID_HOSTNAMES
          value: "true"
        - name: MONGODB_DATABASE
          value: "admin"
        - name: KUBE_NAMESPACE
          value: "{{.namespace}}"
      - name: mongod
{{- if .with_gcs_backups }}
        securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_ADMIN
{{- end }}
        image: {{.image}}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/bash
          - -c
          - >
{{- if .with_gcs_backups }}
            apt-get update && apt-get install curl -y;
            echo "deb http://packages.cloud.google.com/apt gcsfuse-stretch main" > /etc/apt/sources.list.d/gcsfuse.list;
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - > /dev/null;
            apt-get update && apt-get install --yes gcsfuse fuse;
{{- end }}
            mongod --wiredTigerCacheSizeGB 1.5 --bind_ip 0.0.0.0 --replSet {{.mongodb.replsetname}} --smallfiles --noprealloc --auth --sslMode {{.mongodb.sslmode}} --sslPEMKeyFile /etc/mongodb-secret/mongodb.pem --sslAllowConnectionsWithoutCertificates --sslAllowInvalidCertificates --config /etc/mongodb-config/mongodb.conf
        resources:
          requests:
{{- if ne .resources.requests.memory "" }}
            memory: "{{ .resources.requests.memory }}"
{{- end }}
{{- if ne .resources.requests.cpu "" }}
            cpu: "{{ .resources.requests.cpu }}"
{{- end }}
          limits:
{{- if ne .resources.limits.memory "" }}
            memory: "{{ .resources.limits.memory }}"
{{- end }}
{{- if ne .resources.limits.cpu "" }}
            cpu: "{{ .resources.limits.cpu }}"
{{- end }}
        env:
{{- if .with_gcs_backups }}
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/google-credentials
        - name: STORAGE_BUCKET
          value: {{ .gcsfuse.storage_bucket }}
{{- end }}
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "{{.mongodb.rootusername}}"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "{{.mongodb.rootpassword}}"
        ports:
        - name: mongo
          containerPort: 27017
        volumeMounts:
        - name: mongodb-secret
          mountPath: /etc/mongodb-secret/mongodb.pem
          subPath: mongodb.pem
        - name: mongodb-config
          mountPath: /etc/mongodb-config/mongodb.conf
          subPath: mongodb.conf
        - name: tempvol
          mountPath: /mongotemp
        - name: data
          mountPath: /data/db
{{- if .with_gcs_backups }}
        - name: google-credentials
          mountPath: /etc/google-credentials
          subPath: google-credentials
{{- end }}
      volumes:
      - name: tempvol
        emptyDir: {}
      - name: mongodb-secret
        secret:
          secretName: mongodb-secret
      - name: mongodb-rs-key
        secret:
          secretName: mongodb-rs-key
      - name: mongodb-config
        configMap:
          name: mongodb-config
{{- if .with_gcs_backups }}
      - name: shared-bucket-dir
        emptyDir: {}
      - name: google-credentials
        secret:
          secretName: google-credentials
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: volume
        component: mongodb
        role: services
    spec:
      accessModes:
      - "ReadWriteOnce"
      storageClassName: {{.storage_class}}
      resources:
        requests:
          storage: {{.storage_size}}
